/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./graphql/context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  Status: "BUY" | "RENT" | "SALE"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  AutocompleteSuggestion: { // root type
    project_name: string; // String!
    title: string; // String!
  }
  Image: { // root type
    id?: number | null; // Int
    property_id?: number | null; // Int
    url?: string | null; // String
  }
  PageInfo: { // root type
    endCursor?: string | null; // String
    hasNextPage: boolean; // Boolean!
  }
  Property: { // root type
    area: number; // Float!
    bathroom_count: number; // Int!
    bedroom_count: number; // Int!
    description: string; // String!
    id: number; // Int!
    price: number; // Float!
    project_name: string; // String!
    status: NexusGenEnums['Status']; // Status!
    title: string; // String!
  }
  PropertyConnection: { // root type
    edges: NexusGenRootTypes['PropertyEdge'][]; // [PropertyEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  PropertyEdge: { // root type
    cursor: string; // String!
    node: NexusGenRootTypes['Property']; // Property!
  }
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  AutocompleteSuggestion: { // field return type
    project_name: string; // String!
    title: string; // String!
  }
  Image: { // field return type
    id: number | null; // Int
    property_id: number | null; // Int
    url: string | null; // String
  }
  PageInfo: { // field return type
    endCursor: string | null; // String
    hasNextPage: boolean; // Boolean!
  }
  Property: { // field return type
    area: number; // Float!
    bathroom_count: number; // Int!
    bedroom_count: number; // Int!
    description: string; // String!
    id: number; // Int!
    images: NexusGenRootTypes['Image'][]; // [Image!]!
    price: number; // Float!
    project_name: string; // String!
    status: NexusGenEnums['Status']; // Status!
    title: string; // String!
  }
  PropertyConnection: { // field return type
    edges: NexusGenRootTypes['PropertyEdge'][]; // [PropertyEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  PropertyEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Property']; // Property!
  }
  Query: { // field return type
    autocompleteProperties: Array<NexusGenRootTypes['AutocompleteSuggestion'] | null> | null; // [AutocompleteSuggestion]
    properties: NexusGenRootTypes['PropertyConnection'] | null; // PropertyConnection
    property: NexusGenRootTypes['Property'] | null; // Property
  }
}

export interface NexusGenFieldTypeNames {
  AutocompleteSuggestion: { // field return type name
    project_name: 'String'
    title: 'String'
  }
  Image: { // field return type name
    id: 'Int'
    property_id: 'Int'
    url: 'String'
  }
  PageInfo: { // field return type name
    endCursor: 'String'
    hasNextPage: 'Boolean'
  }
  Property: { // field return type name
    area: 'Float'
    bathroom_count: 'Int'
    bedroom_count: 'Int'
    description: 'String'
    id: 'Int'
    images: 'Image'
    price: 'Float'
    project_name: 'String'
    status: 'Status'
    title: 'String'
  }
  PropertyConnection: { // field return type name
    edges: 'PropertyEdge'
    pageInfo: 'PageInfo'
  }
  PropertyEdge: { // field return type name
    cursor: 'String'
    node: 'Property'
  }
  Query: { // field return type name
    autocompleteProperties: 'AutocompleteSuggestion'
    properties: 'PropertyConnection'
    property: 'Property'
  }
}

export interface NexusGenArgTypes {
  Query: {
    autocompleteProperties: { // args
      keyword: string; // String!
    }
    properties: { // args
      after?: string | null; // String
      areaMax?: number | null; // Int
      bathsMin?: number | null; // Int
      first: number; // Int!
      keyword?: string | null; // String
      maxPrice?: number | null; // Int
      minPrice?: number | null; // Int
      roomsMin?: number | null; // Int
      status?: NexusGenEnums['Status'] | null; // Status
    }
    property: { // args
      id: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}